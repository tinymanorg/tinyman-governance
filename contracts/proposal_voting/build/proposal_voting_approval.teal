#pragma version 9
//tealish version git+https://github.com/Hipo/tealish.git@c4f8c12b36dbcc8b63844df5f818164925735087

// Name: <proposal_id>
// Size: 116 bytes

// 24 * 60 * 60
#define DAY 86400
#define BYTES_FALSE "\x00"
#define BYTES_TRUE "\x80"

#define PROPOSAL_STATE_WAITING_FOR_APPROVAL 0
#define PROPOSAL_STATE_CANCELLED 1
#define PROPOSAL_STATE_PENDING 2
#define PROPOSAL_STATE_ACTIVE 3
#define PROPOSAL_STATE_DEFEATED 4
#define PROPOSAL_STATE_SUCCEEDED 5
#define PROPOSAL_STATE_EXECUTED 6

#define VOTE_AGAINST 0
#define VOTE_FOR 1
#define VOTE_ABSTAIN 2

// Global States
#define VAULT_APP_ID_KEY "vault_app_id"
#define PROPOSAL_INDEX_COUNTER_KEY "proposal_index_counter"
#define VOTING_DELAY_KEY "voting_delay"
#define VOTING_DURATION_KEY "voting_duration"
#define PROPOSAL_THRESHOLD_KEY "proposal_threshold"
#define PROPOSAL_THRESHOLD_NUMERATOR_KEY "proposal_threshold_numerator"
#define QUORUM_THRESHOLD_KEY "quorum_threshold"
#define MANAGER_KEY "manager"
#define PROPOSAL_MANAGER_KEY "proposal_manager"
#define APPROVAL_REQUIREMENT_KEY "approval_requirement"

// Box
#define PROPOSAL_BOX_PREFIX "p"
#define ATTENDANCE_BOX_PREFIX "a"
#define ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE 24


// router:
pushbytes "create_application"
pushbytes "update_application"
pushbytes "cast_vote"
pushbytes "create_proposal"
pushbytes "increase_budget"
pushbytes "get_proposal"
pushbytes "has_voted"
pushbytes "approve_proposal"
pushbytes "cancel_proposal"
pushbytes "execute_proposal"
pushbytes "get_box"
pushbytes "set_manager"
pushbytes "set_proposal_manager"
pushbytes "set_voting_delay"
pushbytes "set_voting_duration"
pushbytes "set_proposal_threshold"
pushbytes "set_proposal_threshold_numerator"
pushbytes "set_quorum_threshold"
pushbytes "disable_approval_requirement"
txna ApplicationArgs 0
match route_create_application route_update_application route_cast_vote route_create_proposal route_increase_budget route_get_proposal route_has_voted route_approve_proposal route_cancel_proposal route_execute_proposal route_get_box route_set_manager route_set_proposal_manager route_set_voting_delay route_set_voting_duration route_set_proposal_threshold route_set_proposal_threshold_numerator route_set_quorum_threshold route_disable_approval_requirement
err                 // unexpected value
route_create_application:
  txn ApplicationID
  pushint 0
  ==
  assert              // ApplicationID == 0
  // btoi(Txn.ApplicationArgs[1])
  txna ApplicationArgs 1
  btoi
  callsub __func__create_application
  pushint 1
  return
route_update_application:
  txn OnCompletion
  pushint 4           // UpdateApplication
  ==
  assert
  callsub __func__update_application
  pushint 1
  return
route_cast_vote:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // Txn.ApplicationArgs[1]
  txna ApplicationArgs 1
  // btoi(Txn.ApplicationArgs[2])
  txna ApplicationArgs 2
  btoi
  // Txn.ApplicationArgs[3]
  txna ApplicationArgs 3
  callsub __func__cast_vote
  pushint 1
  return
route_create_proposal:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // Txn.ApplicationArgs[1]
  txna ApplicationArgs 1
  // Cast(Txn.ApplicationArgs[2], bytes[34])
  txna ApplicationArgs 2
  // Bytes Size Assertion
  dup
  len
  pushint 34
  ==
  // Error: Expected 34 bytes
  assert
  // Cast(Txn.ApplicationArgs[3], bytes[32])
  txna ApplicationArgs 3
  // Bytes Size Assertion
  dup
  len
  pushint 32
  ==
  // Error: Expected 32 bytes
  assert
  callsub __func__create_proposal
  pushint 1
  return
route_increase_budget:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // btoi(Txn.ApplicationArgs[1])
  txna ApplicationArgs 1
  btoi
  callsub __func__increase_budget
  pushint 1
  return
route_get_proposal:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // Txn.ApplicationArgs[1]
  txna ApplicationArgs 1
  callsub __func__get_proposal
  // return bytes, int
  // uncover 0 bytes
  uncover 1           // int
  itob
  concat
  pushbytes 0x151f7c75 // arc4 return prefix
  swap
  concat
  log
  pushint 1
  return
route_has_voted:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // Txn.ApplicationArgs[1]
  txna ApplicationArgs 1
  // Txn.ApplicationArgs[2]
  txna ApplicationArgs 2
  callsub __func__has_voted
  // return bytes
  // uncover 0 bytes
  pushbytes 0x151f7c75 // arc4 return prefix
  swap
  concat
  log
  pushint 1
  return
route_approve_proposal:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // Txn.ApplicationArgs[1]
  txna ApplicationArgs 1
  callsub __func__approve_proposal
  pushint 1
  return
route_cancel_proposal:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // Txn.ApplicationArgs[1]
  txna ApplicationArgs 1
  callsub __func__cancel_proposal
  pushint 1
  return
route_execute_proposal:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // Txn.ApplicationArgs[1]
  txna ApplicationArgs 1
  callsub __func__execute_proposal
  pushint 1
  return
route_get_box:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // Txn.ApplicationArgs[1]
  txna ApplicationArgs 1
  callsub __func__get_box
  // return int, bytes, bytes
  // uncover 0 int
  itob
  uncover 1           // bytes
  uncover 2           // bytes
  concat
  concat
  pushbytes 0x151f7c75 // arc4 return prefix
  swap
  concat
  log
  pushint 1
  return
route_set_manager:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // Txn.ApplicationArgs[1]
  txna ApplicationArgs 1
  callsub __func__set_manager
  pushint 1
  return
route_set_proposal_manager:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // Txn.ApplicationArgs[1]
  txna ApplicationArgs 1
  callsub __func__set_proposal_manager
  pushint 1
  return
route_set_voting_delay:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // btoi(Txn.ApplicationArgs[1])
  txna ApplicationArgs 1
  btoi
  callsub __func__set_voting_delay
  pushint 1
  return
route_set_voting_duration:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // btoi(Txn.ApplicationArgs[1])
  txna ApplicationArgs 1
  btoi
  callsub __func__set_voting_duration
  pushint 1
  return
route_set_proposal_threshold:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // btoi(Txn.ApplicationArgs[1])
  txna ApplicationArgs 1
  btoi
  callsub __func__set_proposal_threshold
  pushint 1
  return
route_set_proposal_threshold_numerator:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // btoi(Txn.ApplicationArgs[1])
  txna ApplicationArgs 1
  btoi
  callsub __func__set_proposal_threshold_numerator
  pushint 1
  return
route_set_quorum_threshold:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  // btoi(Txn.ApplicationArgs[1])
  txna ApplicationArgs 1
  btoi
  callsub __func__set_quorum_threshold
  pushint 1
  return
route_disable_approval_requirement:
  txn OnCompletion
  pushint 0           // NoOp
  ==
  assert
  callsub __func__disable_approval_requirement
  pushint 1
  return


// func create_application(vault_app_id: int):
__func__create_application:
  store 1             // vault_app_id [int]
  // app_global_put(VAULT_APP_ID_KEY, vault_app_id)
  pushbytes VAULT_APP_ID_KEY // "vault_app_id"
  load 1              // vault_app_id
  app_global_put
  // app_global_put(PROPOSAL_INDEX_COUNTER_KEY, 0)
  pushbytes PROPOSAL_INDEX_COUNTER_KEY // "proposal_index_counter"
  pushint 0           // uint64
  app_global_put
  
  // voting starts at the N'th midnight after creation time
  // app_global_put(VOTING_DELAY_KEY, 2)
  pushbytes VOTING_DELAY_KEY // "voting_delay"
  pushint 2           // uint8
  app_global_put
  
  // voting ends at the N'th midnight after voting start time
  // app_global_put(VOTING_DURATION_KEY, 7)
  pushbytes VOTING_DURATION_KEY // "voting_duration"
  pushint 7           // uint8
  app_global_put
  
  // proposer must have X amount total voting power, default 450K
  // app_global_put(PROPOSAL_THRESHOLD_KEY, 450000000000)
  pushbytes PROPOSAL_THRESHOLD_KEY // "proposal_threshold"
  pushint 450000000000 // uint40
  app_global_put
  
  // proposer must have %N of the total voting power, default %0
  // app_global_put(PROPOSAL_THRESHOLD_NUMERATOR_KEY, 0)
  pushbytes PROPOSAL_THRESHOLD_NUMERATOR_KEY // "proposal_threshold_numerator"
  pushint 0           // uint64
  app_global_put
  
  // required voting power (for or abstain) to reach quorum, default 2,25M (2_250_000_000_000)
  // app_global_put(QUORUM_THRESHOLD_KEY, 2250000000000)
  pushbytes QUORUM_THRESHOLD_KEY // "quorum_threshold"
  pushint 2250000000000 // uint48
  app_global_put
  
  // app_global_put(APPROVAL_REQUIREMENT_KEY, 1)
  pushbytes APPROVAL_REQUIREMENT_KEY // "approval_requirement"
  pushint 1           // uint8
  app_global_put
  
  // app_global_put(MANAGER_KEY, Txn.Sender)
  pushbytes MANAGER_KEY // "manager"
  txn Sender
  app_global_put
  // app_global_put(PROPOSAL_MANAGER_KEY, Txn.Sender)
  pushbytes PROPOSAL_MANAGER_KEY // "proposal_manager"
  txn Sender
  app_global_put
  // return
  retsub

// func update_application():
__func__update_application:
  // bytes user_address = Txn.Sender [slot 2]
  txn Sender
  store 2             // user_address
  // assert(user_address == app_global_get(MANAGER_KEY))
  load 2              // user_address
  pushbytes MANAGER_KEY // "manager"
  app_global_get
  ==
  assert
  // return
  retsub

// func increase_budget(inner_app_call_count: int):
__func__increase_budget:
  store 3             // inner_app_call_count [int]
  // Box read budget and opcode budget will be incread using this method.
  // for _ in 0:inner_app_call_count:
    pushint 0           // uint64
    dup
    l0_for:
    load 3              // inner_app_call_count
    ==
    bnz l0_end
    // inner_txn:
    callsub _itxn_begin
      // TypeEnum: Appl
      pushint 6           // Appl
      itxn_field TypeEnum
      // ApplicationID: app_global_get(VAULT_APP_ID_KEY)
      pushbytes VAULT_APP_ID_KEY // "vault_app_id"
      app_global_get
      itxn_field ApplicationID
      // ApplicationArgs[0]: "increase_budget"
      pushbytes "increase_budget"
      itxn_field ApplicationArgs
      // Fee: 0
      pushint 0           // uint64
      itxn_field Fee
    callsub _itxn_submit
    // end inner_txn
    pushint 1
    +
    dup
    b l0_for
    pop
    l0_end:             // end
  // return
  retsub

// func set_manager(new_manager: bytes):
__func__set_manager:
  store 4             // new_manager [bytes]
  // bytes user_address = Txn.Sender [slot 5]
  txn Sender
  store 5             // user_address
  // assert(user_address == app_global_get(MANAGER_KEY))
  load 5              // user_address
  pushbytes MANAGER_KEY // "manager"
  app_global_get
  ==
  assert
  
  // assert(len(new_manager) == 32)
  load 4              // new_manager
  len
  pushint 32          // uint8
  ==
  assert
  // app_global_put(MANAGER_KEY, new_manager)
  pushbytes MANAGER_KEY // "manager"
  load 4              // new_manager
  app_global_put
  // log(Concat(method("set_manager(address)"), new_manager))
  method "set_manager(address)"
  load 4              // new_manager
  concat
  log
  // return
  retsub

// func set_proposal_manager(new_proposal_manager: bytes):
__func__set_proposal_manager:
  store 6             // new_proposal_manager [bytes]
  // bytes user_address = Txn.Sender [slot 7]
  txn Sender
  store 7             // user_address
  // assert(user_address == app_global_get(MANAGER_KEY))
  load 7              // user_address
  pushbytes MANAGER_KEY // "manager"
  app_global_get
  ==
  assert
  
  // assert(len(new_proposal_manager) == 32)
  load 6              // new_proposal_manager
  len
  pushint 32          // uint8
  ==
  assert
  // app_global_put(PROPOSAL_MANAGER_KEY, new_proposal_manager)
  pushbytes PROPOSAL_MANAGER_KEY // "proposal_manager"
  load 6              // new_proposal_manager
  app_global_put
  // log(Concat(method("set_proposal_manager(address)"), new_proposal_manager))
  method "set_proposal_manager(address)"
  load 6              // new_proposal_manager
  concat
  log
  // return
  retsub

// func approve_proposal(proposal_id: bytes):
__func__approve_proposal:
  store 8             // proposal_id [bytes]
  // bytes user_address = Txn.Sender [slot 9]
  txn Sender
  store 9             // user_address
  // assert(user_address == app_global_get(PROPOSAL_MANAGER_KEY))
  load 9              // user_address
  pushbytes PROPOSAL_MANAGER_KEY // "proposal_manager"
  app_global_get
  ==
  assert
  
  // bytes proposal_box_name = Concat(PROPOSAL_BOX_PREFIX, proposal_id) [slot 10]
  pushbytes PROPOSAL_BOX_PREFIX // "p"
  load 8              // proposal_id
  concat
  store 10            // proposal_box_name
  // box<Proposal> proposal = OpenBox(proposal_box_name) [slot 11]
  load 10             // proposal_box_name
  dup
  box_len
  assert              // exists
  pushint 182
  ==
  assert              // len(box) == {self.struct_name}.size
  store 11            // proposal
  // assert(proposal.is_approved == BYTES_FALSE)
  load 11             // box key proposal
  pushint 80          // offset
  pushint 1           // size
  box_extract         // proposal.is_approved
  pushbytes BYTES_FALSE // "\x00"
  ==
  assert
  // assert(!proposal.voting_start_timestamp)
  load 11             // box key proposal
  pushint 16          // offset
  pushint 8           // size
  box_extract         // proposal.voting_start_timestamp
  btoi
  !
  assert
  // assert(proposal.is_cancelled == BYTES_FALSE)
  load 11             // box key proposal
  pushint 81          // offset
  pushint 1           // size
  box_extract         // proposal.is_cancelled
  pushbytes BYTES_FALSE // "\x00"
  ==
  assert
  
  // int voting_start_timestamp = get_voting_start_timestamp() [slot 12]
  callsub __func__get_voting_start_timestamp
  store 12            // voting_start_timestamp
  // int voting_end_timestamp = voting_start_timestamp + (app_global_get(VOTING_DURATION_KEY) * DAY) [slot 13]
  load 12             // voting_start_timestamp
  pushbytes VOTING_DURATION_KEY // "voting_duration"
  app_global_get
  pushint DAY         // 86400
  *
  +
  store 13            // voting_end_timestamp
  
  // proposal.is_approved = BYTES_TRUE [box]
  load 11             // box key proposal
  pushint 80          // offset
  pushbytes BYTES_TRUE // "\x80"
  box_replace         // proposal.is_approved
  // proposal.voting_start_timestamp = voting_start_timestamp [box]
  load 11             // box key proposal
  pushint 16          // offset
  load 12             // voting_start_timestamp
  itob
  box_replace         // proposal.voting_start_timestamp
  // proposal.voting_end_timestamp = voting_end_timestamp [box]
  load 11             // box key proposal
  pushint 24          // offset
  load 13             // voting_end_timestamp
  itob
  box_replace         // proposal.voting_end_timestamp
  
  // bytes proposal_data [slot 14]
  // _, proposal_data = box_get(proposal_box_name)
  load 10             // proposal_box_name
  box_get
  pop                 // discarding value for _
  store 14            // proposal_data
  // log(Concat(method("proposal(byte[59],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,bool,bool,address,byte[34],address)"), proposal_id, proposal_data))
  method "proposal(byte[59],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,bool,bool,address,byte[34],address)"
  load 8              // proposal_id
  load 14             // proposal_data
  concat
  concat
  log
  // log(Concat(method("approve_proposal(address,byte[59])"), user_address, proposal_id))
  method "approve_proposal(address,byte[59])"
  load 9              // user_address
  load 8              // proposal_id
  concat
  concat
  log
  // return
  retsub

// func cancel_proposal(proposal_id: bytes):
__func__cancel_proposal:
  store 15            // proposal_id [bytes]
  // bytes user_address = Txn.Sender [slot 16]
  txn Sender
  store 16            // user_address
  // assert(user_address == app_global_get(PROPOSAL_MANAGER_KEY))
  load 16             // user_address
  pushbytes PROPOSAL_MANAGER_KEY // "proposal_manager"
  app_global_get
  ==
  assert
  
  // bytes proposal_box_name = Concat(PROPOSAL_BOX_PREFIX, proposal_id) [slot 17]
  pushbytes PROPOSAL_BOX_PREFIX // "p"
  load 15             // proposal_id
  concat
  store 17            // proposal_box_name
  // box<Proposal> proposal = OpenBox(proposal_box_name) [slot 18]
  load 17             // proposal_box_name
  dup
  box_len
  assert              // exists
  pushint 182
  ==
  assert              // len(box) == {self.struct_name}.size
  store 18            // proposal
  // assert(proposal.is_cancelled == BYTES_FALSE)
  load 18             // box key proposal
  pushint 81          // offset
  pushint 1           // size
  box_extract         // proposal.is_cancelled
  pushbytes BYTES_FALSE // "\x00"
  ==
  assert
  // assert(proposal.is_executed == BYTES_FALSE)
  load 18             // box key proposal
  pushint 82          // offset
  pushint 1           // size
  box_extract         // proposal.is_executed
  pushbytes BYTES_FALSE // "\x00"
  ==
  assert
  // assert((Global.LatestTimestamp < proposal.voting_end_timestamp) || !proposal.voting_end_timestamp)
  global LatestTimestamp
  load 18             // box key proposal
  pushint 24          // offset
  pushint 8           // size
  box_extract         // proposal.voting_end_timestamp
  btoi
  <
  load 18             // box key proposal
  pushint 24          // offset
  pushint 8           // size
  box_extract         // proposal.voting_end_timestamp
  btoi
  !
  ||
  assert
  // proposal.is_cancelled = BYTES_TRUE [box]
  load 18             // box key proposal
  pushint 81          // offset
  pushbytes BYTES_TRUE // "\x80"
  box_replace         // proposal.is_cancelled
  
  // bytes proposal_data [slot 19]
  // _, proposal_data = box_get(proposal_box_name)
  load 17             // proposal_box_name
  box_get
  pop                 // discarding value for _
  store 19            // proposal_data
  // log(Concat(method("proposal(byte[59],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,bool,bool,address,byte[34],address)"), proposal_id, proposal_data))
  method "proposal(byte[59],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,bool,bool,address,byte[34],address)"
  load 15             // proposal_id
  load 19             // proposal_data
  concat
  concat
  log
  // log(Concat(method("cancel_proposal(address,byte[59])"), user_address, proposal_id))
  method "cancel_proposal(address,byte[59])"
  load 16             // user_address
  load 15             // proposal_id
  concat
  concat
  log
  // return
  retsub

// func execute_proposal(proposal_id: bytes):
__func__execute_proposal:
  store 20            // proposal_id [bytes]
  // bytes user_address = Txn.Sender [slot 21]
  txn Sender
  store 21            // user_address
  // bytes proposal_box_name = Concat(PROPOSAL_BOX_PREFIX, proposal_id) [slot 22]
  pushbytes PROPOSAL_BOX_PREFIX // "p"
  load 20             // proposal_id
  concat
  store 22            // proposal_box_name
  // box<Proposal> proposal = OpenBox(proposal_box_name) [slot 23]
  load 22             // proposal_box_name
  dup
  box_len
  assert              // exists
  pushint 182
  ==
  assert              // len(box) == {self.struct_name}.size
  store 23            // proposal
  // assert(proposal.voting_end_timestamp)
  load 23             // box key proposal
  pushint 24          // offset
  pushint 8           // size
  box_extract         // proposal.voting_end_timestamp
  btoi
  assert
  // assert(proposal.voting_end_timestamp < Global.LatestTimestamp)
  load 23             // box key proposal
  pushint 24          // offset
  pushint 8           // size
  box_extract         // proposal.voting_end_timestamp
  btoi
  global LatestTimestamp
  <
  assert
  // assert(proposal.is_cancelled == BYTES_FALSE)
  load 23             // box key proposal
  pushint 81          // offset
  pushint 1           // size
  box_extract         // proposal.is_cancelled
  pushbytes BYTES_FALSE // "\x00"
  ==
  assert
  // assert(proposal.is_executed == BYTES_FALSE)
  load 23             // box key proposal
  pushint 82          // offset
  pushint 1           // size
  box_extract         // proposal.is_executed
  pushbytes BYTES_FALSE // "\x00"
  ==
  assert
  // assert(proposal.is_quorum_reached == BYTES_TRUE)
  load 23             // box key proposal
  pushint 83          // offset
  pushint 1           // size
  box_extract         // proposal.is_quorum_reached
  pushbytes BYTES_TRUE // "\x80"
  ==
  assert
  // assert(proposal.for_voting_power > proposal.against_voting_power)
  load 23             // box key proposal
  pushint 64          // offset
  pushint 8           // size
  box_extract         // proposal.for_voting_power
  btoi
  load 23             // box key proposal
  pushint 56          // offset
  pushint 8           // size
  box_extract         // proposal.against_voting_power
  btoi
  >
  assert
  // assert(proposal.executor == user_address)
  load 23             // box key proposal
  pushint 150         // offset
  pushint 32          // size
  box_extract         // proposal.executor
  load 21             // user_address
  ==
  assert
  // proposal.is_executed = BYTES_TRUE [box]
  load 23             // box key proposal
  pushint 82          // offset
  pushbytes BYTES_TRUE // "\x80"
  box_replace         // proposal.is_executed
  
  // bytes proposal_data [slot 24]
  // _, proposal_data = box_get(proposal_box_name)
  load 22             // proposal_box_name
  box_get
  pop                 // discarding value for _
  store 24            // proposal_data
  // log(Concat(method("proposal(byte[59],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,bool,bool,address,byte[34],address)"), proposal_id, proposal_data))
  method "proposal(byte[59],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,bool,bool,address,byte[34],address)"
  load 20             // proposal_id
  load 24             // proposal_data
  concat
  concat
  log
  // log(Concat(method("execute_proposal(address,byte[59])"), user_address, proposal_id))
  method "execute_proposal(address,byte[59])"
  load 21             // user_address
  load 20             // proposal_id
  concat
  concat
  log
  // return
  retsub

// func create_proposal(proposal_id: bytes, execution_hash: bytes[34], executor: bytes[32]):
__func__create_proposal:
  store 25            // executor [bytes[32]]
  store 26            // execution_hash [bytes[34]]
  store 27            // proposal_id [bytes]
  // bytes[32] user_address = Txn.Sender [slot 28]
  txn Sender
  store 28            // user_address
  
  // 1. Check voting power threshold
  // int account_voting_power = get_account_voting_power(user_address) [slot 29]
  load 28             // user_address
  callsub __func__get_account_voting_power
  store 29            // account_voting_power
  // int total_voting_power = get_total_voting_power() [slot 30]
  callsub __func__get_total_voting_power
  store 30            // total_voting_power
  
  // Tiny power amount threshold
  // assert(account_voting_power >= app_global_get(PROPOSAL_THRESHOLD_KEY))
  load 29             // account_voting_power
  pushbytes PROPOSAL_THRESHOLD_KEY // "proposal_threshold"
  app_global_get
  >=
  assert
  // Tiny power percentage threshold
  // assert((itob(account_voting_power) b* itob(100)) b>= (itob(total_voting_power) b* itob(app_global_get(PROPOSAL_THRESHOLD_NUMERATOR_KEY))))
  load 29             // account_voting_power
  itob
  pushint 100         // uint8
  itob
  b*
  load 30             // total_voting_power
  itob
  pushbytes PROPOSAL_THRESHOLD_NUMERATOR_KEY // "proposal_threshold_numerator"
  app_global_get
  itob
  b*
  b>=
  assert
  
  // 2. Check proposal id
  // proposal id will be calculated off-chain. it is base32 string representation of CID (base32 - cidv1 - raw - (sha2-256 : 256 : <metadata>))
  // assert(len(proposal_id) == 59)
  load 27             // proposal_id
  len
  pushint 59          // uint8
  ==
  assert
  // bytes proposal_box_name = Concat(PROPOSAL_BOX_PREFIX, proposal_id) [slot 31]
  pushbytes PROPOSAL_BOX_PREFIX // "p"
  load 27             // proposal_id
  concat
  store 31            // proposal_box_name
  
  // 3. Create Box
  // box<Proposal> proposal = CreateBox(proposal_box_name) [slot 32]
  load 31             // proposal_box_name
  dup
  pushint 182
  box_create
  assert              // assert created
  store 32            // proposal
  // proposal.index = app_global_get(PROPOSAL_INDEX_COUNTER_KEY) [box]
  load 32             // box key proposal
  pushint 0           // offset
  pushbytes PROPOSAL_INDEX_COUNTER_KEY // "proposal_index_counter"
  app_global_get
  itob
  box_replace         // proposal.index
  // proposal.creation_timestamp = Global.LatestTimestamp [box]
  load 32             // box key proposal
  pushint 8           // offset
  global LatestTimestamp
  itob
  box_replace         // proposal.creation_timestamp
  // proposal.snapshot_total_voting_power = total_voting_power [box]
  load 32             // box key proposal
  pushint 32          // offset
  load 30             // total_voting_power
  itob
  box_replace         // proposal.snapshot_total_voting_power
  // proposal.proposer = user_address [box]
  load 32             // box key proposal
  pushint 84          // offset
  load 28             // user_address
  box_replace         // proposal.proposer
  // proposal.quorum_threshold = app_global_get(QUORUM_THRESHOLD_KEY) [box]
  load 32             // box key proposal
  pushint 48          // offset
  pushbytes QUORUM_THRESHOLD_KEY // "quorum_threshold"
  app_global_get
  itob
  box_replace         // proposal.quorum_threshold
  // proposal.execution_hash = execution_hash [box]
  load 32             // box key proposal
  pushint 116         // offset
  load 26             // execution_hash
  box_replace         // proposal.execution_hash
  // proposal.executor = executor [box]
  load 32             // box key proposal
  pushint 150         // offset
  load 25             // executor
  box_replace         // proposal.executor
  
  // 4. Start & End time
  // if !app_global_get(APPROVAL_REQUIREMENT_KEY):
    pushbytes APPROVAL_REQUIREMENT_KEY // "approval_requirement"
    app_global_get
    !
    bz l1_end
    // then:
      // int voting_start_timestamp = get_voting_start_timestamp() [slot 33]
      callsub __func__get_voting_start_timestamp
      store 33            // voting_start_timestamp
      // int voting_end_timestamp = voting_start_timestamp + (app_global_get(VOTING_DURATION_KEY) * DAY) [slot 34]
      load 33             // voting_start_timestamp
      pushbytes VOTING_DURATION_KEY // "voting_duration"
      app_global_get
      pushint DAY         // 86400
      *
      +
      store 34            // voting_end_timestamp
      // proposal.voting_start_timestamp = voting_start_timestamp [box]
      load 32             // box key proposal
      pushint 16          // offset
      load 33             // voting_start_timestamp
      itob
      box_replace         // proposal.voting_start_timestamp
      // proposal.voting_end_timestamp = voting_end_timestamp [box]
      load 32             // box key proposal
      pushint 24          // offset
      load 34             // voting_end_timestamp
      itob
      box_replace         // proposal.voting_end_timestamp
    l1_end:             // end
  
  // app_global_put(PROPOSAL_INDEX_COUNTER_KEY, app_global_get(PROPOSAL_INDEX_COUNTER_KEY) + 1)
  pushbytes PROPOSAL_INDEX_COUNTER_KEY // "proposal_index_counter"
  pushbytes PROPOSAL_INDEX_COUNTER_KEY // "proposal_index_counter"
  app_global_get
  pushint 1           // uint8
  +
  app_global_put
  
  // bytes proposal_data [slot 35]
  // _, proposal_data = box_get(proposal_box_name)
  load 31             // proposal_box_name
  box_get
  pop                 // discarding value for _
  store 35            // proposal_data
  // log(Concat(method("proposal(byte[59],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,bool,bool,address,byte[34],address)"), proposal_id, proposal_data))
  method "proposal(byte[59],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,bool,bool,address,byte[34],address)"
  load 27             // proposal_id
  load 35             // proposal_data
  concat
  concat
  log
  // log(Concat(method("create_proposal(address,byte[59])"), user_address, proposal_id))
  method "create_proposal(address,byte[59])"
  load 28             // user_address
  load 27             // proposal_id
  concat
  concat
  log
  // return
  retsub

// func cast_vote(proposal_id: bytes, vote: int, account_power_index: bytes):
__func__cast_vote:
  store 36            // account_power_index [bytes]
  store 37            // vote [int]
  store 38            // proposal_id [bytes]
  // bytes user_address = Txn.Sender [slot 39]
  txn Sender
  store 39            // user_address
  
  // Get proposal
  // bytes proposal_box_name = Concat(PROPOSAL_BOX_PREFIX, proposal_id) [slot 40]
  pushbytes PROPOSAL_BOX_PREFIX // "p"
  load 38             // proposal_id
  concat
  store 40            // proposal_box_name
  // box<Proposal> proposal = OpenBox(proposal_box_name) [slot 41]
  load 40             // proposal_box_name
  dup
  box_len
  assert              // exists
  pushint 182
  ==
  assert              // len(box) == {self.struct_name}.size
  store 41            // proposal
  
  // Proposal Active
  // assert(proposal.is_cancelled == BYTES_FALSE)
  load 41             // box key proposal
  pushint 81          // offset
  pushint 1           // size
  box_extract         // proposal.is_cancelled
  pushbytes BYTES_FALSE // "\x00"
  ==
  assert
  
  // proposal.voting_start_timestamp <= Global.LatestTimestamp < proposal.voting_end_timestamp
  // assert(proposal.voting_start_timestamp)
  load 41             // box key proposal
  pushint 16          // offset
  pushint 8           // size
  box_extract         // proposal.voting_start_timestamp
  btoi
  assert
  // assert(proposal.voting_start_timestamp <= Global.LatestTimestamp)
  load 41             // box key proposal
  pushint 16          // offset
  pushint 8           // size
  box_extract         // proposal.voting_start_timestamp
  btoi
  global LatestTimestamp
  <=
  assert
  // assert(Global.LatestTimestamp < proposal.voting_end_timestamp)
  global LatestTimestamp
  load 41             // box key proposal
  pushint 24          // offset
  pushint 8           // size
  box_extract         // proposal.voting_end_timestamp
  btoi
  <
  assert
  
  // Check attendance
  // check_and_set_user_as_voted(user_address, proposal.index)
  load 39             // user_address
  load 41             // box key proposal
  pushint 0           // offset
  pushint 8           // size
  box_extract         // proposal.index
  btoi
  callsub __func__check_and_set_user_as_voted
  
  // Get voting power
  // int account_voting_power = get_account_voting_power_at(user_address, proposal.creation_timestamp, account_power_index) [slot 42]
  load 39             // user_address
  load 41             // box key proposal
  pushint 8           // offset
  pushint 8           // size
  box_extract         // proposal.creation_timestamp
  btoi
  load 36             // account_power_index
  callsub __func__get_account_voting_power_at
  store 42            // account_voting_power
  // assert(account_voting_power)
  load 42             // account_voting_power
  assert
  
  // Count Vote
  // if vote == VOTE_AGAINST:
    load 37             // vote
    pushint VOTE_AGAINST // 0
    ==
    bz l2_elif_0
    // then:
      // proposal.against_voting_power = proposal.against_voting_power + account_voting_power [box]
      load 41             // box key proposal
      pushint 56          // offset
      load 41             // box key proposal
      pushint 56          // offset
      pushint 8           // size
      box_extract         // proposal.against_voting_power
      btoi
      load 42             // account_voting_power
      +
      itob
      box_replace         // proposal.against_voting_power
    b l2_end
    l2_elif_0:
    // elif vote == VOTE_FOR:
    load 37             // vote
    pushint VOTE_FOR    // 1
    ==
    bz l2_elif_1
      // proposal.for_voting_power = proposal.for_voting_power + account_voting_power [box]
      load 41             // box key proposal
      pushint 64          // offset
      load 41             // box key proposal
      pushint 64          // offset
      pushint 8           // size
      box_extract         // proposal.for_voting_power
      btoi
      load 42             // account_voting_power
      +
      itob
      box_replace         // proposal.for_voting_power
    b l2_end
    l2_elif_1:
    // elif vote == VOTE_ABSTAIN:
    load 37             // vote
    pushint VOTE_ABSTAIN // 2
    ==
    bz l2_else
      // proposal.abstain_voting_power = proposal.abstain_voting_power + account_voting_power [box]
      load 41             // box key proposal
      pushint 72          // offset
      load 41             // box key proposal
      pushint 72          // offset
      pushint 8           // size
      box_extract         // proposal.abstain_voting_power
      btoi
      load 42             // account_voting_power
      +
      itob
      box_replace         // proposal.abstain_voting_power
    b l2_end
    l2_else:
    // else:
      // Error()
      err
    l2_end:             // end
  
  // if proposal.quorum_threshold <= (proposal.for_voting_power + proposal.abstain_voting_power):
    load 41             // box key proposal
    pushint 48          // offset
    pushint 8           // size
    box_extract         // proposal.quorum_threshold
    btoi
    load 41             // box key proposal
    pushint 64          // offset
    pushint 8           // size
    box_extract         // proposal.for_voting_power
    btoi
    load 41             // box key proposal
    pushint 72          // offset
    pushint 8           // size
    box_extract         // proposal.abstain_voting_power
    btoi
    +
    <=
    bz l3_end
    // then:
      // proposal.is_quorum_reached = BYTES_TRUE [box]
      load 41             // box key proposal
      pushint 83          // offset
      pushbytes BYTES_TRUE // "\x80"
      box_replace         // proposal.is_quorum_reached
    l3_end:             // end
  
  // Update proposal
  // proposal.vote_count = proposal.vote_count + 1 [box]
  load 41             // box key proposal
  pushint 40          // offset
  load 41             // box key proposal
  pushint 40          // offset
  pushint 8           // size
  box_extract         // proposal.vote_count
  btoi
  pushint 1           // uint8
  +
  itob
  box_replace         // proposal.vote_count
  
  // bytes proposal_data [slot 43]
  // _, proposal_data = box_get(proposal_box_name)
  load 40             // proposal_box_name
  box_get
  pop                 // discarding value for _
  store 43            // proposal_data
  // log(Concat(method("proposal(byte[59],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,bool,bool,address,byte[34],address)"), proposal_id, proposal_data))
  method "proposal(byte[59],uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bool,bool,bool,bool,address,byte[34],address)"
  load 38             // proposal_id
  load 43             // proposal_data
  concat
  concat
  log
  // log(Concat(method("cast_vote(address,byte[59],uint64,uint64)"), user_address, proposal_id, itob(vote), itob(account_voting_power)))
  method "cast_vote(address,byte[59],uint64,uint64)"
  load 39             // user_address
  load 38             // proposal_id
  load 37             // vote
  itob
  load 42             // account_voting_power
  itob
  concat
  concat
  concat
  concat
  log
  // return
  retsub

// func set_voting_delay(new_voting_delay: int):
__func__set_voting_delay:
  store 44            // new_voting_delay [int]
  // bytes user_address = Txn.Sender [slot 45]
  txn Sender
  store 45            // user_address
  // assert(user_address == app_global_get(PROPOSAL_MANAGER_KEY))
  load 45             // user_address
  pushbytes PROPOSAL_MANAGER_KEY // "proposal_manager"
  app_global_get
  ==
  assert
  
  // app_global_put(VOTING_DELAY_KEY, new_voting_delay)
  pushbytes VOTING_DELAY_KEY // "voting_delay"
  load 44             // new_voting_delay
  app_global_put
  // log(Concat(method("set_voting_delay(uint64)"), itob(new_voting_delay)))
  method "set_voting_delay(uint64)"
  load 44             // new_voting_delay
  itob
  concat
  log
  // return
  retsub

// func set_voting_duration(new_voting_duration: int):
__func__set_voting_duration:
  store 46            // new_voting_duration [int]
  // bytes user_address = Txn.Sender [slot 47]
  txn Sender
  store 47            // user_address
  // assert(user_address == app_global_get(PROPOSAL_MANAGER_KEY))
  load 47             // user_address
  pushbytes PROPOSAL_MANAGER_KEY // "proposal_manager"
  app_global_get
  ==
  assert
  
  // assert(new_voting_duration)
  load 46             // new_voting_duration
  assert
  // app_global_put(VOTING_DURATION_KEY, new_voting_duration)
  pushbytes VOTING_DURATION_KEY // "voting_duration"
  load 46             // new_voting_duration
  app_global_put
  // log(Concat(method("set_voting_duration(uint64)"), itob(new_voting_duration)))
  method "set_voting_duration(uint64)"
  load 46             // new_voting_duration
  itob
  concat
  log
  // return
  retsub

// func set_proposal_threshold(new_proposal_threshold: int):
__func__set_proposal_threshold:
  store 48            // new_proposal_threshold [int]
  // bytes user_address = Txn.Sender [slot 49]
  txn Sender
  store 49            // user_address
  // assert(user_address == app_global_get(PROPOSAL_MANAGER_KEY))
  load 49             // user_address
  pushbytes PROPOSAL_MANAGER_KEY // "proposal_manager"
  app_global_get
  ==
  assert
  
  // app_global_put(PROPOSAL_THRESHOLD_KEY, new_proposal_threshold)
  pushbytes PROPOSAL_THRESHOLD_KEY // "proposal_threshold"
  load 48             // new_proposal_threshold
  app_global_put
  // log(Concat(method("set_proposal_threshold(uint64)"), itob(new_proposal_threshold)))
  method "set_proposal_threshold(uint64)"
  load 48             // new_proposal_threshold
  itob
  concat
  log
  // return
  retsub

// func set_proposal_threshold_numerator(new_proposal_threshold_numerator: int):
__func__set_proposal_threshold_numerator:
  store 50            // new_proposal_threshold_numerator [int]
  // bytes user_address = Txn.Sender [slot 51]
  txn Sender
  store 51            // user_address
  // assert(user_address == app_global_get(PROPOSAL_MANAGER_KEY))
  load 51             // user_address
  pushbytes PROPOSAL_MANAGER_KEY // "proposal_manager"
  app_global_get
  ==
  assert
  
  // assert(new_proposal_threshold_numerator <= 100)
  load 50             // new_proposal_threshold_numerator
  pushint 100         // uint8
  <=
  assert
  // app_global_put(PROPOSAL_THRESHOLD_NUMERATOR_KEY, new_proposal_threshold_numerator)
  pushbytes PROPOSAL_THRESHOLD_NUMERATOR_KEY // "proposal_threshold_numerator"
  load 50             // new_proposal_threshold_numerator
  app_global_put
  // log(Concat(method("set_proposal_threshold_numerator(uint64)"), itob(new_proposal_threshold_numerator)))
  method "set_proposal_threshold_numerator(uint64)"
  load 50             // new_proposal_threshold_numerator
  itob
  concat
  log
  // return
  retsub

// func set_quorum_threshold(new_quorum_threshold: int):
__func__set_quorum_threshold:
  store 52            // new_quorum_threshold [int]
  // bytes user_address = Txn.Sender [slot 53]
  txn Sender
  store 53            // user_address
  // assert(user_address == app_global_get(PROPOSAL_MANAGER_KEY))
  load 53             // user_address
  pushbytes PROPOSAL_MANAGER_KEY // "proposal_manager"
  app_global_get
  ==
  assert
  
  // app_global_put(QUORUM_THRESHOLD_KEY, new_quorum_threshold)
  pushbytes QUORUM_THRESHOLD_KEY // "quorum_threshold"
  load 52             // new_quorum_threshold
  app_global_put
  // log(Concat(method("set_quorum_threshold(uint64)"), itob(new_quorum_threshold)))
  method "set_quorum_threshold(uint64)"
  load 52             // new_quorum_threshold
  itob
  concat
  log
  // return
  retsub

// func disable_approval_requirement():
__func__disable_approval_requirement:
  // bytes user_address = Txn.Sender [slot 54]
  txn Sender
  store 54            // user_address
  // assert(user_address == app_global_get(PROPOSAL_MANAGER_KEY))
  load 54             // user_address
  pushbytes PROPOSAL_MANAGER_KEY // "proposal_manager"
  app_global_get
  ==
  assert
  
  // assert(app_global_get(APPROVAL_REQUIREMENT_KEY))
  pushbytes APPROVAL_REQUIREMENT_KEY // "approval_requirement"
  app_global_get
  assert
  // app_global_put(APPROVAL_REQUIREMENT_KEY, 0)
  pushbytes APPROVAL_REQUIREMENT_KEY // "approval_requirement"
  pushint 0           // uint64
  app_global_put
  // log(method("disable_approval_requirement()"))
  method "disable_approval_requirement()"
  log
  // return
  retsub

// func get_proposal(proposal_id: bytes) bytes, int:
__func__get_proposal:
  store 55            // proposal_id [bytes]
  // bytes proposal_box_name = Concat(PROPOSAL_BOX_PREFIX, proposal_id) [slot 56]
  pushbytes PROPOSAL_BOX_PREFIX // "p"
  load 55             // proposal_id
  concat
  store 56            // proposal_box_name
  // int exists [slot 57]
  // bytes proposal_data [slot 58]
  // exists, proposal_data = box_get(proposal_box_name)
  load 56             // proposal_box_name
  box_get
  store 57            // exists
  store 58            // proposal_data
  // assert(exists)
  load 57             // exists
  assert
  
  // Proposal proposal = Cast(proposal_data, Proposal) [slot 59]
  load 58             // proposal_data
  // Bytes Size Assertion
  dup
  len
  pushint 182
  ==
  // Error: Expected 182 bytes
  assert
  store 59            // proposal
  
  // int state [slot 60]
  // if proposal.is_cancelled == BYTES_TRUE:
    load 59             // proposal
    extract 81 1        // is_cancelled
    pushbytes BYTES_TRUE // "\x80"
    ==
    bz l4_elif_0
    // then:
      // state = PROPOSAL_STATE_CANCELLED
      pushint PROPOSAL_STATE_CANCELLED // 1
      store 60            // state
    b l4_end
    l4_elif_0:
    // elif proposal.is_executed == BYTES_TRUE:
    load 59             // proposal
    extract 82 1        // is_executed
    pushbytes BYTES_TRUE // "\x80"
    ==
    bz l4_elif_1
      // state = PROPOSAL_STATE_EXECUTED
      pushint PROPOSAL_STATE_EXECUTED // 6
      store 60            // state
    b l4_end
    l4_elif_1:
    // elif !proposal.voting_start_timestamp:
    load 59             // proposal
    extract 16 8        // voting_start_timestamp
    btoi
    !
    bz l4_elif_2
      // state = PROPOSAL_STATE_WAITING_FOR_APPROVAL
      pushint PROPOSAL_STATE_WAITING_FOR_APPROVAL // 0
      store 60            // state
    b l4_end
    l4_elif_2:
    // elif Global.LatestTimestamp < proposal.voting_start_timestamp:
    global LatestTimestamp
    load 59             // proposal
    extract 16 8        // voting_start_timestamp
    btoi
    <
    bz l4_elif_3
      // state = PROPOSAL_STATE_PENDING
      pushint PROPOSAL_STATE_PENDING // 2
      store 60            // state
    b l4_end
    l4_elif_3:
    // elif Global.LatestTimestamp < proposal.voting_end_timestamp:
    global LatestTimestamp
    load 59             // proposal
    extract 24 8        // voting_end_timestamp
    btoi
    <
    bz l4_elif_4
      // state = PROPOSAL_STATE_ACTIVE
      pushint PROPOSAL_STATE_ACTIVE // 3
      store 60            // state
    b l4_end
    l4_elif_4:
    // elif (proposal.is_quorum_reached == BYTES_FALSE) || (proposal.for_voting_power <= proposal.against_voting_power):
    load 59             // proposal
    extract 83 1        // is_quorum_reached
    pushbytes BYTES_FALSE // "\x00"
    ==
    load 59             // proposal
    extract 64 8        // for_voting_power
    btoi
    load 59             // proposal
    extract 56 8        // against_voting_power
    btoi
    <=
    ||
    bz l4_else
      // state = PROPOSAL_STATE_DEFEATED
      pushint PROPOSAL_STATE_DEFEATED // 4
      store 60            // state
    b l4_end
    l4_else:
    // else:
      // state = PROPOSAL_STATE_SUCCEEDED
      pushint PROPOSAL_STATE_SUCCEEDED // 5
      store 60            // state
    l4_end:             // end
  
  // return proposal_data, state
  load 60             // state
  load 58             // proposal_data
  retsub

// func has_voted(proposal_id: bytes, address: bytes) bytes:
__func__has_voted:
  store 61            // address [bytes]
  store 62            // proposal_id [bytes]
  // bytes proposal_box_name = Concat(PROPOSAL_BOX_PREFIX, proposal_id) [slot 63]
  pushbytes PROPOSAL_BOX_PREFIX // "p"
  load 62             // proposal_id
  concat
  store 63            // proposal_box_name
  // box<Proposal> proposal = OpenBox(proposal_box_name) [slot 64]
  load 63             // proposal_box_name
  dup
  box_len
  assert              // exists
  pushint 182
  ==
  assert              // len(box) == {self.struct_name}.size
  store 64            // proposal
  
  // int proposal_index = proposal.index [slot 65]
  load 64             // box key proposal
  pushint 0           // offset
  pushint 8           // size
  box_extract         // proposal.index
  btoi
  store 65            // proposal_index
  // int box_index = proposal_index / (ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE * 8) [slot 66]
  load 65             // proposal_index
  pushint ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE // 24
  pushint 8           // uint8
  *
  /
  store 66            // box_index
  // int array_index = proposal_index % (ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE * 8) [slot 67]
  load 65             // proposal_index
  pushint ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE // 24
  pushint 8           // uint8
  *
  %
  store 67            // array_index
  // bytes box_name = Concat(ATTENDANCE_BOX_PREFIX, Concat(address, itob(box_index))) [slot 68]
  pushbytes ATTENDANCE_BOX_PREFIX // "a"
  load 61             // address
  load 66             // box_index
  itob
  concat
  concat
  store 68            // box_name
  
  // int exists [slot 69]
  // exists, _ = box_len(box_name)
  load 68             // box_name
  box_len
  store 69            // exists
  pop                 // discarding value for _
  // bytes result = BYTES_FALSE [slot 70]
  pushbytes BYTES_FALSE // "\x00"
  store 70            // result
  // if exists:
    load 69             // exists
    bz l5_end
    // then:
      // if getbit(box_extract(box_name, 0, ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE), array_index):
        load 68             // box_name
        pushint 0           // uint64
        pushint ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE // 24
        box_extract
        load 67             // array_index
        getbit
        bz l6_end
        // then:
          // result = BYTES_TRUE
          pushbytes BYTES_TRUE // "\x80"
          store 70            // result
        l6_end:             // end
    l5_end:             // end
  
  // return result
  load 70             // result
  retsub

// func get_box(box_name: bytes) int, bytes, bytes:
__func__get_box:
  store 71            // box_name [bytes]
  // int exists [slot 72]
  // bytes data [slot 73]
  // exists, data = box_get(box_name)
  load 71             // box_name
  box_get
  store 72            // exists
  store 73            // data
  
  // return exists, extract(6, 2, itob(len(data))), data
  load 73             // data
  load 73             // data
  len
  itob
  extract 6 2
  load 72             // exists
  retsub

// func check_and_set_user_as_voted(address: bytes, proposal_index: int):
__func__check_and_set_user_as_voted:
  store 74            // proposal_index [int]
  store 75            // address [bytes]
  // int box_index = proposal_index / (ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE * 8) [slot 76]
  load 74             // proposal_index
  pushint ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE // 24
  pushint 8           // uint8
  *
  /
  store 76            // box_index
  // int array_index = proposal_index % (ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE * 8) [slot 77]
  load 74             // proposal_index
  pushint ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE // 24
  pushint 8           // uint8
  *
  %
  store 77            // array_index
  // bytes box_name = Concat(ATTENDANCE_BOX_PREFIX, Concat(address, itob(box_index))) [slot 78]
  pushbytes ATTENDANCE_BOX_PREFIX // "a"
  load 75             // address
  load 76             // box_index
  itob
  concat
  concat
  store 78            // box_name
  
  // bytes sheet [slot 79]
  // _ = box_create(box_name, ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE)
  load 78             // box_name
  pushint ACCOUNT_ATTENDANCE_SHEET_BOX_SIZE // 24
  box_create
  pop                 // discarding value for _
  // _, sheet = box_get(box_name)
  load 78             // box_name
  box_get
  pop                 // discarding value for _
  store 79            // sheet
  // assert(!getbit(sheet, array_index))
  load 79             // sheet
  load 77             // array_index
  getbit
  !
  assert
  // sheet = setbit(sheet, array_index, 1)
  load 79             // sheet
  load 77             // array_index
  pushint 1           // uint8
  setbit
  store 79            // sheet
  // box_put(box_name, sheet)
  load 78             // box_name
  load 79             // sheet
  box_put
  // return
  retsub

// func get_voting_start_timestamp() int:
__func__get_voting_start_timestamp:
  // int end_timestamp_of_day = ((Global.LatestTimestamp / DAY) * DAY) + DAY [slot 80]
  global LatestTimestamp
  pushint DAY         // 86400
  /
  pushint DAY         // 86400
  *
  pushint DAY         // 86400
  +
  store 80            // end_timestamp_of_day
  // return end_timestamp_of_day + (app_global_get(VOTING_DELAY_KEY) * DAY)
  load 80             // end_timestamp_of_day
  pushbytes VOTING_DELAY_KEY // "voting_delay"
  app_global_get
  pushint DAY         // 86400
  *
  +
  retsub

// func get_account_voting_power(address: bytes) int:
__func__get_account_voting_power:
  store 81            // address [bytes]
  // inner_txn:
  callsub _itxn_begin
    // TypeEnum: Appl
    pushint 6           // Appl
    itxn_field TypeEnum
    // ApplicationID: app_global_get(VAULT_APP_ID_KEY)
    pushbytes VAULT_APP_ID_KEY // "vault_app_id"
    app_global_get
    itxn_field ApplicationID
    // ApplicationArgs[0]: "get_tiny_power_of"
    pushbytes "get_tiny_power_of"
    itxn_field ApplicationArgs
    // ApplicationArgs[1]: address
    load 81             // address
    itxn_field ApplicationArgs
    // Fee: 0
    pushint 0           // uint64
    itxn_field Fee
  callsub _itxn_submit
  // end inner_txn
  // int voting_power = extract_uint64(Itxn.LastLog, 4) [slot 82]
  itxn LastLog
  pushint 4           // uint8
  extract_uint64
  store 82            // voting_power
  // return voting_power
  load 82             // voting_power
  retsub

// func get_account_voting_power_at(address: bytes, snapshot_timestamp: int, account_power_index: bytes) int:
__func__get_account_voting_power_at:
  store 83            // account_power_index [bytes]
  store 84            // snapshot_timestamp [int]
  store 85            // address [bytes]
  // inner_txn:
  callsub _itxn_begin
    // TypeEnum: Appl
    pushint 6           // Appl
    itxn_field TypeEnum
    // ApplicationID: app_global_get(VAULT_APP_ID_KEY)
    pushbytes VAULT_APP_ID_KEY // "vault_app_id"
    app_global_get
    itxn_field ApplicationID
    // ApplicationArgs[0]: "get_tiny_power_of_at"
    pushbytes "get_tiny_power_of_at"
    itxn_field ApplicationArgs
    // ApplicationArgs[1]: address
    load 85             // address
    itxn_field ApplicationArgs
    // ApplicationArgs[2]: itob(snapshot_timestamp)
    load 84             // snapshot_timestamp
    itob
    itxn_field ApplicationArgs
    // ApplicationArgs[3]: account_power_index
    load 83             // account_power_index
    itxn_field ApplicationArgs
    // Fee: 0
    pushint 0           // uint64
    itxn_field Fee
  callsub _itxn_submit
  // end inner_txn
  // int voting_power = extract_uint64(Itxn.LastLog, 4) [slot 86]
  itxn LastLog
  pushint 4           // uint8
  extract_uint64
  store 86            // voting_power
  // return voting_power
  load 86             // voting_power
  retsub

// func get_total_voting_power() int:
__func__get_total_voting_power:
  // inner_txn:
  callsub _itxn_begin
    // TypeEnum: Appl
    pushint 6           // Appl
    itxn_field TypeEnum
    // ApplicationID: app_global_get(VAULT_APP_ID_KEY)
    pushbytes VAULT_APP_ID_KEY // "vault_app_id"
    app_global_get
    itxn_field ApplicationID
    // ApplicationArgs[0]: "get_total_tiny_power"
    pushbytes "get_total_tiny_power"
    itxn_field ApplicationArgs
    // Fee: 0
    pushint 0           // uint64
    itxn_field Fee
  callsub _itxn_submit
  // end inner_txn
  // int voting_power = extract_uint64(Itxn.LastLog, 4) [slot 87]
  itxn LastLog
  pushint 4           // uint8
  extract_uint64
  store 87            // voting_power
  // return voting_power
  load 87             // voting_power
  retsub


_itxn_group_begin:
  load 88; !; assert // ensure no group active
  int 1; store 88; retsub // set group flag

_itxn_begin:
  load 88
  switch _itxn_begin__0 _itxn_begin__1 _itxn_begin__2
  err
  _itxn_begin__0: itxn_begin; retsub // no group
  _itxn_begin__1: itxn_begin; int 2; store 88; retsub // start first txn of group
  _itxn_begin__2: itxn_next; retsub // start next txn of group

_itxn_submit:
  load 88
  bz _itxn_submit__0
  retsub            // in a group, don't submit
  _itxn_submit__0: itxn_submit; retsub // no group, submit

_itxn_group_submit:
  itxn_submit
  int 0; store 88; retsub // set group flag to 0

